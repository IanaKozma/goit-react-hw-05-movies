{"version":3,"file":"static/js/415.f996e70a.chunk.js","mappings":"8SAMaA,EAAU,mCAgDvB,UA9Ca,WACV,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAAgCC,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KAoBA,OAlBAC,EAAAA,EAAAA,YAAU,WACPH,GAAa,GACb,IAAMI,EAAa,mCAAG,8GAEEC,EAAAA,EAAAA,GAAM,yDAAD,OACqCZ,IAH5C,cAEVa,EAFU,OAKhBR,EAAYQ,EAAIC,KAAKC,SALL,kBAOTF,EAAIC,MAPK,gCAShBL,EAAS,KAAMO,SACfC,QAAQC,IAAR,MAVgB,yDAAH,qDAanBP,IAAgBQ,SAAQ,kBAAMZ,GAAa,EAAnB,GAC1B,GAAE,KAGA,2BACID,IAAa,SAAC,IAAD,KACd,SAAC,KAAD,UACIF,EAASgB,KAAI,SAAAC,GACX,OACG,yBACG,UAAC,KAAD,CACGC,GAAE,kBAAaD,EAAME,IACrBC,MAAO,CAAEC,KAAMxB,GAFlB,UAIIoB,EAAMK,OAASL,EAAMM,KAAM,SALzBC,EAAAA,EAAAA,MASd,MAEHpB,IAAS,uBAAIA,MAGtB,C,wDCnDM,IAkBIoB,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACV,EAAIW,GAWvD,OAREX,IAFFW,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["pages/Home.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { Link, useLocation } from 'react-router-dom';\nimport Loader from 'components/Loader/Loader';\nimport { MoviesContainer } from 'components/SharedLayout/SharedLayout.styled';\nexport const API_KEY = '3ed700b5d7b679b57b749969c057aea5';\n\nconst Home = () => {\n   const location = useLocation();\n   const [trending, setTrending] = useState([]);\n   const [isLoading, setIsLoading] = useState(false);\n   const [error, setError] = useState(false);\n\n   useEffect(() => {\n      setIsLoading(true);\n      const fetchTrending = async () => {\n         try {\n            const res = await axios(\n               `https://api.themoviedb.org/3/trending/all/day?api_key=${API_KEY}`\n            );\n            setTrending(res.data.results);\n\n            return res.data;\n         } catch (error) {\n            setError(error.message);\n            console.log(error);\n         }\n      };\n      fetchTrending().finally(() => setIsLoading(false));\n   }, []);\n   \n   return (\n      <div>\n         {isLoading && <Loader />}\n         <MoviesContainer>\n            {trending.map(movie => {\n               return (\n                  <li key={nanoid()}>\n                     <Link\n                        to={`/movies/${movie.id}`}\n                        state={{ from: location }}\n                     >\n                        {movie.title || movie.name}{' '}\n                     </Link>\n                  </li>\n               );\n            })}\n         </MoviesContainer>\n         {error && <p>{error}</p>}\n      </div>\n   );\n};\n\nexport default Home;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["API_KEY","location","useLocation","useState","trending","setTrending","isLoading","setIsLoading","error","setError","useEffect","fetchTrending","axios","res","data","results","message","console","log","finally","map","movie","to","id","state","from","title","name","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}