{"version":3,"file":"static/js/247.a33e1fe2.chunk.js","mappings":"oPA0DA,UApDkB,WACf,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAA0BE,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAqBC,OAnBDC,EAAAA,EAAAA,YAAU,WACPH,GAAa,GACb,IAAMI,EAAU,mCAAG,8GAEKC,EAAAA,EAAAA,GAAM,sCAAD,OACkBX,EADlB,qEAFV,cAEPY,EAFO,OAKbR,EAASQ,EAAIC,KAAKC,MACbF,EAAIC,KAAKC,KAAKC,QAChBP,EAAS,0CAPC,kBASNI,EAAIC,MATE,yDAWNL,EAAS,KAAMQ,UAXT,yDAAH,qDAchBN,IAAaO,SAAQ,kBAAMX,GAAa,EAAnB,GACvB,GAAE,CAACN,KAGD,2BACIK,IAAa,SAAC,IAAD,IACbE,IAAS,6BAAKA,MACf,wBACIJ,EAAMe,KAAI,SAAAf,GACR,OACG,2BACG,yBAAMA,EAAMgB,QACZ,gBACGC,IACGjB,EAAMkB,aAAN,6CAC2ClB,EAAMkB,cAC5C,sEAERC,MAAM,QACNC,IAAKpB,EAAMgB,UATRK,EAAAA,EAAAA,MAad,QAIZ,C,wDCvDM,IAkBIA,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/Cast/Cast.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import axios from 'axios';\nimport { nanoid } from 'nanoid';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Loader from '../Loader/Loader';\n\nconst MovieCast = () => {\n   const { movieId } = useParams();\n\n   const [movie, setMovie] = useState([]);\n   const [isLoading, setIsloading] = useState(false);\n   const [error, setError] = useState(null);\n\n   useEffect(() => {\n      setIsloading(true);\n      const fetchMovie = async () => {\n         try {\n            const res = await axios(\n               `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=3ed700b5d7b679b57b749969c057aea5&language=en-US`\n            );\n            setMovie(res.data.cast);\n            if (!res.data.cast.length) {\n               setError('Information about the cast is missing.');\n            }\n            return res.data;\n         } catch (error) {\n            return setError(error.message);\n         }\n      };\n      fetchMovie().finally(() => setIsloading(false));\n   }, [movieId]);\n\n    return (\n      <div>\n         {isLoading && <Loader/>}\n         {error && <p> {error}</p>}\n         <ul>\n            {movie.map(movie => {\n               return (\n                  <li key={nanoid()}>\n                     <div>{movie.name}</div>\n                     <img\n                        src={\n                           movie.profile_path\n                              ? `https://www.themoviedb.org/t/p/w500${movie.profile_path}`\n                              : 'https://www.themoviedb.org/t/p/w500/q9qKbux5Jo76Sj8g3luxBt6rYtz.jpg'\n                        }\n                        width=\"250px\"\n                        alt={movie.name}\n                     />\n                  </li>\n               );\n            })}\n         </ul>\n      </div>\n   );\n};\n\nexport default MovieCast;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["movieId","useParams","useState","movie","setMovie","isLoading","setIsloading","error","setError","useEffect","fetchMovie","axios","res","data","cast","length","message","finally","map","name","src","profile_path","width","alt","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase"],"sourceRoot":""}